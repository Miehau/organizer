plugins {
	id 'org.springframework.boot' version '2.1.7.RELEASE'
	id 'java'
}

apply plugin: 'io.spring.dependency-management'

group = 'org.mmlak'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '8'

configurations {
	compile.exclude module: 'spring-boot-starter-logging'
	runtime.exclude module: 'spring-boot-starter-logging'

	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}
	compileOnly {
		extendsFrom annotationProcessor
	}
	cucumberRuntime {
		extendsFrom testImplementation
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation ('org.springframework.boot:spring-boot-starter-data-jpa')
	implementation ('org.springframework.boot:spring-boot-starter-data-rest')
	implementation ('org.springframework.boot:spring-boot-starter-security')
	implementation ('org.springframework.security:spring-security-test')
	implementation ('org.springframework.boot:spring-boot-starter-log4j2')
	compile group: 'io.jsonwebtoken', name: 'jjwt', version: '0.9.1'
	compile (group: 'org.springframework.security.oauth.boot', name: 'spring-security-oauth2-autoconfigure', version: '2.2.6.RELEASE')
	compile group: 'org.springframework.security', name: 'spring-security-oauth2-client', version: '5.1.6.RELEASE'
	developmentOnly ('org.springframework.boot:spring-boot-devtools')
	runtimeOnly 'com.h2database:h2'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'com.h2database:h2'
	testImplementation 'info.cukes:cucumber-core:1.2.4'
	testImplementation 'info.cukes:cucumber-java:1.2.4'
	testImplementation 'info.cukes:cucumber-spring:1.2.4'
	testImplementation 'info.cukes:cucumber-junit:1.2.4'
}

test {
	testLogging {
		events "passed", "skipped", "failed"
		exceptionFormat "full"
	}
}

task cucumber() {
	dependsOn assemble, compileTestJava
	doLast {
		javaexec {
			main = "cucumber.api.cli.Main"
			classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
			args = ['--plugin', 'pretty', '--glue', 'org.mmlak.organizer.cucumber', 'src/test/resources']
		}
	}
}

task buildNpm(type: Exec) {
	workingDir './src/v-dashboard'
	commandLine 'npm', 'run', 'build'
}

task copyResourcesToBuild(type: Copy){
	dependsOn 'buildNpm'
	from "$projectDir/src/v-dashboard/dist"
	into "$buildDir/resources/main/static"
}

processResources{
	dependsOn copyResourcesToBuild
}